using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;
using CardGame.Core;
using CardGame.TextBased;
using CardGame.Utilities;
using Ninject;
using Ninject.Extensions.Factory;

namespace CardGame.Console
{
    /// <summary>
    ///     This class encapsulates the main entry point of the program.
    /// </summary>
    /// <param name="args">Command-line arguments. This parameter is unused.</param>
    internal class Program
    {
        /// <summary>
        ///     The main entry point of the program. This method initializes the composition root and then launches the game session.
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            System.Console.Title = "Card Game";

            var kernel = new Ninject.StandardKernel();
            kernel.Load(System.Reflection.Assembly.GetExecutingAssembly());

            var gameSessionManager = kernel.Get<CardGameSessionManager>();
            gameSessionManager.BeginSession();
        }
    }

    /// <summary>
    ///     This class is part of the composition root and is used to store specific string values.
    /// </summary>
    internal static class Constants
    {
        private static string appBasePath;

        static Constants()
        {
            appBasePath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\";
        }

        public static string NullValue { get; } = "~NULL~";

        public static string SettingsFileName { get; } = "settings.xml";

        public static string SettingsFilePath
        {
            get
            {
                return appBasePath + SettingsFileName;
            }
        }

        public static string ConfigFileName { get; } = "CardGame.config";

        public static string ConfigFilePath
        {
            get
            {
                return appBasePath + ConfigFileName;
            }
        }
    }

    /// <summary>
    ///     The composition root of the program, where bindings are defined and settings are loaded.
    /// </summary>
    public class NinjectCompositionRoot : Ninject.Modules.NinjectModule
    {
        /// <summary>
        ///     Dummy class used to simplify saving/loading bindings where the service is bound to a proxy factory generated by Ninject.
        /// </summary>
        private class FactoryType { }

        private List<Tuple<Type, Type>> customBindings = new List<Tuple<Type, Type>>();

        private void LoadStoredBindings(string fileName)
        {
            var doc = XDocument.Load(fileName);
            var bindings = doc.Element("Config").Elements();
            foreach (var bindingElement in bindings)
            {
                var serviceType = Type.GetType(bindingElement.Attribute("Service").Value);
                var targetType = Type.GetType(bindingElement.Attribute("Target").Value);

                if (targetType == typeof(FactoryType))
                {
                    this.BindToFactory(serviceType);
                }
                else
                {
                    this.Bind(serviceType, targetType);
                }
            }
        }

        private void SaveBindings(string fileName)
        {
            var doc = new XDocument();
            var configElement = new XElement(
                "Config",
                from binding in this.customBindings
                select new XElement(
                    "Binding",
                    new XAttribute("Service", binding.Item1.AssemblyQualifiedName),
                    new XAttribute("Target", binding.Item2.AssemblyQualifiedName)));

            doc.Add(configElement);
            doc.Save(fileName);
        }

        private Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax<object> Bind(Type serviceType, Type targetType)
        {
            this.customBindings.Add(new Tuple<Type, Type>(serviceType, targetType));
            return this.Bind(serviceType).To(targetType);
        }

        private new Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax<T2> Bind<T1, T2>() where T2 : T1
        {
            this.customBindings.Add(new Tuple<Type, Type>(typeof(T1), typeof(T2)));
            return this.Bind<T1>().To<T2>();
        }

        private Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax<T> BindToFactory<T>() where T : class
        {
            this.customBindings.Add(new Tuple<Type, Type>(typeof(T), typeof(FactoryType)));
            return this.Bind<T>().ToFactory();
        }

        private Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax<object> BindToFactory(Type serviceType)
        {
            this.customBindings.Add(new Tuple<Type, Type>(serviceType, typeof(FactoryType)));
            return this.Bind(serviceType).ToFactory(serviceType);
        }

        private void LoadDefaultBindings()
        {
            this.Bind<ITextInterface, ConsoleInterface>().InSingletonScope();
            this.Bind<IPlayer, Player>();
            this.Bind<IPlayerFactory, PlayerFactory>();
            this.Bind<IPlayerCollection, PlayerCollection>();
            this.Bind<IPlayerCollectionFactory, CardGame.TextBased.PlayerCollectionFactory>();
            this.Bind<ICardGame, CardGame.Core.CardGame>();
            this.Bind<ICardGameFactory, CardGameFactory>();
            this.Bind<IRandomGenerator, RandomGenerator>();
            this.Bind<ICard, Card>();
            this.Bind<ICardCollection, CardCollection>();
            this.BindToFactory<ICardCollectionFactory>();
            this.Bind<IFaceValue, FaceValue>();
            this.Bind<ISuit, Suit>();
            this.Bind<IDeck, Deck>();
            this.BindToFactory<IVictoryCheckerFactory>();
            this.Bind<IDeckFactory, DeckFactory>();
            this.BindToFactory<IScorerFactory>();
            this.Bind<IScorer, CardGameScorer>();
            this.Bind<IVictoryChecker, VictoryChecker>();
            this.Bind<ICommandHandler<DrawCardsCommand>, DrawCardsCommandHandler>();
            this.Bind<ICommandHandler<UpdateScoresCommand>, UpdateScoresCommandHandler>();
            this.Bind<ICommandHandler<CheckForGameEndCommand>, CheckForGameEndCommandHandler>();
        }

        private void LoadBindings()
        {
            var fileName = Constants.ConfigFilePath;
            if (File.Exists(fileName))
            {
                try
                {
                    this.LoadStoredBindings(fileName);
                }
                catch (Exception)
                {
                    this.LoadDefaultBindings();
                    this.SaveBindings(fileName);
                }
            }
            else
            {
                this.LoadDefaultBindings();
                this.SaveBindings(fileName);
            }
        }

        private void LoadSettings()
        {
            var dependencyResolver = new NinjectDependencyResolver(this.Kernel);
            var settings = CardGameSettings.Create(dependencyResolver);

            this.Bind<PlayerSettings>().ToConstant(
                new PlayerSettings()
                {
                    MinimumPlayerCount = settings.PlayerCountMinimum,
                    MaximumPlayerCount = settings.PlayerCountMaximum,
                    MinimumNameLength = settings.PlayerNameMinimumLength,
                    MaximumNameLength = settings.PlayerNameMaximumLength
                });

            this.Bind<KeyInputSettings>().ToConstant(
                new KeyInputSettings()
                {
                    DrawCardKey = settings.DrawCardKey,
                    ContinueRoundKey = settings.ContinueRoundKey,
                    ExitKey = settings.ExitKey
                });

            this.Bind<DeckSettings>().ToConstant(
                new DeckSettings()
                {
                    Cards = settings.Cards
                });

            this.Bind<ScoringSettings>().ToConstant(
                new ScoringSettings()
                {
                    GetCardValueDelegate = settings.GetCardValueDelegate,
                    WinnerBonusPointTotal = settings.HighestCardScoreChange
                });

            this.Bind<VictoryCheckerSettings>().ToConstant(
                new VictoryCheckerSettings()
                {
                    MinimumVictoryScoreTotal = settings.MinimumVictoryScoreTotal,
                    RequiredScoreLead = settings.RequiredVictoryScoreLead,
                    ScoreLeadMustBeExactValue = settings.VictoryScoreLeadMustBeAnExactValue
                });
        }

        public override void Load()
        {
            this.LoadBindings();
            this.LoadSettings();
        }
    }

    /// <summary>
    ///     This interface is part of the composition root and is intended to be used with the <see cref="CardGameSettings"/> class to decouple it from the IoC Container.
    /// </summary>
    internal interface IDependencyResolver
    {
        T Get<T>();
    }

    /// <summary>
    ///     Ninject implementation of the <see cref="IDependencyResolver"/> interface.
    /// </summary>
    internal class NinjectDependencyResolver : IDependencyResolver
    {
        private IKernel kernel;

        public NinjectDependencyResolver(IKernel kernel)
        {
            Guard.AgainstNull(kernel, nameof(kernel));

            this.kernel = kernel;
        }

        public T Get<T>()
        {
            return this.kernel.Get<T>();
        }
    }

    /// <summary>
    ///     Adapter class implementing <see cref="ITextInterface"/> for the static Console class.
    /// </summary>
    public class ConsoleInterface : ITextInterface
    {
        public event EventHandler<KeyPressEventArgs> KeyPressed;

        private int bufferTop = 0;
        private int bufferLeft = 1;
        private int lastLeft = 0;
        private int lastTop = 0;

        public ConsoleInterface()
        {
            this.WriteLeftBuffer();
            this.lastLeft = System.Console.CursorLeft;
            this.lastTop = System.Console.CursorTop;
        }

        public int BufferTop
        {
            get
            {
                return this.bufferTop;
            }

            set
            {
                this.bufferTop = value;
            }
        }

        public int BufferLeft
        {
            get
            {
                return this.bufferLeft;
            }

            set
            {
                this.bufferLeft = value;
                this.WriteLeftBuffer();
            }
        }

        public int CursorLeft
        {
            get
            {
                return System.Console.CursorLeft;
            }

            set
            {
                System.Console.CursorLeft = value >= this.bufferLeft ? value : this.bufferLeft;
            }
        }

        public int CursorTop
        {
            get
            {
                return System.Console.CursorTop;
            }

            set
            {
                System.Console.CursorTop = value;
            }
        }

        public int WindowWidth
        {
            get
            {
                return System.Console.WindowWidth;
            }

            set
            {
                System.Console.WindowWidth = value;
            }
        }

        public int WindowHeight
        {
            get
            {
                return System.Console.WindowHeight;
            }

            set
            {
                System.Console.WindowHeight = value;
            }
        }

        public string Title
        {
            get
            {
                return System.Console.Title;
            }

            set
            {
                System.Console.Title = value ?? String.Empty;
            }
        }

        public void Backspace()
        {
            if (System.Console.CursorTop != this.lastTop)
            {
                System.Console.CursorTop = this.lastTop;
                System.Console.CursorLeft = this.lastLeft;
            }
            else
            {
                this.Write("\b \b");
            }
        }

        public char ReadKey()
        {
            this.lastLeft = System.Console.CursorLeft;
            this.lastTop = System.Console.CursorTop;

            var consoleKeyInfo = System.Console.ReadKey(true);
            var keyPressed = consoleKeyInfo.KeyChar;

            if (!HandleKeyPress(consoleKeyInfo))
            {
                if (consoleKeyInfo.KeyChar == 13)
                {
                    System.Console.WriteLine();
                }
                else if (consoleKeyInfo.KeyChar == 8)
                {
                    this.Backspace();
                }
                else
                {
                    System.Console.Write(consoleKeyInfo.KeyChar);
                }
            }

            return keyPressed;
        }

        private bool HandleKeyPress(ConsoleKeyInfo consoleKeyInfo)
        {
            var keyEvent = this.KeyPressed;
            if (keyEvent != null)
            {
                var args = new KeyPressEventArgs(consoleKeyInfo.KeyChar);
                keyEvent(this, args);

                return args.Handled;
            }
            else
            {
                return false;
            }
        }

        public string ReadLine()
        {
            var builder = new StringBuilder();
            while (true)
            {
                var key = this.ReadKey();
                if (key == 13)
                {
                    break;
                }
                else
                {
                    builder.Append(key);
                }
            }

            return builder.ToString();
        }

        private void WriteLeftBuffer()
        {
            int index = System.Console.CursorLeft;
            for (int i = index; i < this.BufferLeft; i++)
            {
                System.Console.Write(' ');
            }
        }

        public void Write(string text)
        {
            if (System.Console.CursorLeft < this.BufferLeft)
            {
                WriteLeftBuffer();
            }

            System.Console.Write(text);
        }

        public void WriteLine(string text)
        {
            this.Write(text);
            System.Console.WriteLine();
            WriteLeftBuffer();
        }

        public void Clear()
        {
            System.Console.Clear();
        }
    }

    /// <summary>
    ///     This class is part of the composition root and is used to load and save the game settings from an XML file.
    /// </summary>
    internal class CardGameSettings
    {
        private IDependencyResolver dependencyResolver;

        private CardGameSettings()
        {
        }

        public ICardCollection Cards { get; set; }

        public Func<ICard, int> GetCardValueDelegate { get; set; }

        public int MinimumVictoryScoreTotal { get; set; }

        public int RequiredVictoryScoreLead { get; set; }

        public int HighestCardScoreChange { get; set; }

        public int PlayerCountMinimum { get; set; }

        public int PlayerCountMaximum { get; set; }

        public int PlayerNameMinimumLength { get; set; }

        public int PlayerNameMaximumLength { get; set; }

        public bool VictoryScoreLeadMustBeAnExactValue { get; set; }

        public bool RankCardsByFaceValueFirst { get; set; }

        public char DrawCardKey { get; set; }

        public char ContinueRoundKey { get; set; }

        public char ExitKey { get; set; }

        private int faceValueScoreModifier = 100;

        private int suitScoreModifier = 1;

        private Dictionary<IFaceValue, CardMemberData> faceValueData;

        private Dictionary<ISuit, CardMemberData> suitData;

        private List<SpecialCardData> specialCards;

        private ISuit GetNewSuit(string name)
        {
            var suit = this.dependencyResolver.Get<ISuit>();
            suit.Name = name;

            return suit;
        }

        private IFaceValue GetNewFaceValue(string value)
        {
            var faceValue = this.dependencyResolver.Get<IFaceValue>();
            faceValue.Value = value;

            return faceValue;
        }

        private ICard GetNewCard(IFaceValue faceValue, ISuit suit)
        {
            var card = this.dependencyResolver.Get<ICard>();
            card.FaceValue = faceValue;
            card.Suit = suit;

            return card;
        }

        internal class CardMemberData
        {
            public int Rank { get; set; }

            public CardMemberData(int value)
            {
                this.Rank = value;
            }
        }

        internal class SpecialCardData
        {
            public ICard Card { get; set; }

            public int Count { get; set; }

            public int ScoreChange { get; set; }

            public SpecialCardData(ICard card, int scoreChange, int count)
            {
                Guard.AgainstNull(card, nameof(card));

                this.Card = card;
                this.ScoreChange = scoreChange;
                this.Count = count;
            }
        }

        internal static CardGameSettings Create(IDependencyResolver dependencyResolver)
        {
            Guard.AgainstNull(dependencyResolver, nameof(dependencyResolver));

            var fileName = Constants.SettingsFilePath;
            var settings = new CardGameSettings();
            settings.dependencyResolver = dependencyResolver;

            if (File.Exists(fileName))
            {
                try
                {
                    var storedSettings = LoadStoredSettings(settings, fileName);
                    return storedSettings;
                }
                catch (Exception) // occurs when the file has been modified outside of the program, likely by a user
                {
                    settings = new CardGameSettings();
                    settings.dependencyResolver = dependencyResolver;
                    System.Console.WriteLine("Error: Settings.xml file has been corrupted. Loading default settings.");
                    System.Console.WriteLine();
                }
            }

            settings.LoadDefaultSettings();
            settings.SaveFile(fileName);

            return settings;
        }

        private void AddSuit(string name, int rank)
        {
            var suit = this.GetNewSuit(name);
            var data = new CardMemberData(rank);

            this.suitData.Add(suit, data);
        }

        private void AddFaceValue(string value, int rank)
        {
            var suit = this.GetNewFaceValue(value);
            var data = new CardMemberData(rank);

            this.faceValueData.Add(suit, data);
        }

        private void LoadDefaultSettings()
        {
            this.PlayerNameMinimumLength = 1;
            this.PlayerNameMaximumLength = 10;
            this.PlayerCountMinimum = 2;
            this.PlayerCountMaximum = 4;
            this.HighestCardScoreChange = 2;
            this.MinimumVictoryScoreTotal = 21;
            this.RequiredVictoryScoreLead = 2;
            this.VictoryScoreLeadMustBeAnExactValue = false;
            this.RankCardsByFaceValueFirst = true;
            this.DrawCardKey = 'D';
            this.ContinueRoundKey = 'D';
            this.ExitKey = (char)27;

            this.Cards = new CardCollection();
            this.suitData = new Dictionary<ISuit, CardMemberData>();
            this.faceValueData = new Dictionary<IFaceValue, CardMemberData>();

            this.AddSuit("Clubs", 0);
            this.AddSuit("Diamonds", 1);
            this.AddSuit("Hearts", 2);
            this.AddSuit("Spades", 3);

            this.AddFaceValue("Two", 2);
            this.AddFaceValue("Three", 3);
            this.AddFaceValue("Four", 2);
            this.AddFaceValue("Five", 2);
            this.AddFaceValue("Six", 6);
            this.AddFaceValue("Seven", 7);
            this.AddFaceValue("Eight", 8);
            this.AddFaceValue("Nine", 9);
            this.AddFaceValue("Ten", 10);
            this.AddFaceValue("Jack", 11);
            this.AddFaceValue("Queen", 12);
            this.AddFaceValue("King", 13);
            this.AddFaceValue("Ace", 14);

            var penaltyCard = this.GetNewCard(this.GetNewFaceValue("Penalty"), null);
            this.specialCards = new List<SpecialCardData> { new SpecialCardData(penaltyCard, -1, 4) };

            this.LoadCards();
        }

        private void LoadCards()
        {
            if (!this.RankCardsByFaceValueFirst)
            {
                this.faceValueScoreModifier = 1;
                this.suitScoreModifier = 100;
            }

            foreach (var suit in suitData.Keys)
            {
                foreach (var faceValue in faceValueData.Keys)
                {
                    var card = this.GetNewCard(faceValue, suit);
                    this.Cards.Add(card);
                }
            }

            foreach (var specialCardData in this.specialCards)
            {
                for (int i = 0; i < specialCardData.Count; i++)
                {
                    this.Cards.Add(specialCardData.Card);
                }
            }

            this.GetCardValueDelegate = this.GetCardValue;
        }

        private int GetCardValue(ICard card)
        {
            Guard.AgainstNull(card, nameof(card));

            var specialCardData = this.specialCards.FirstOrDefault(scd => scd.Card == card);
            if (specialCardData != null)
            {
                return specialCardData.ScoreChange;
            }

            int value = 0;
            CardMemberData faceValueData;
            CardMemberData suitData;

            if (card.FaceValue != null && this.faceValueData.TryGetValue(card.FaceValue, out faceValueData))
            {
                value += faceValueData.Rank * faceValueScoreModifier;
            }

            if (card.Suit != null && this.suitData.TryGetValue(card.Suit, out suitData))
            {
                value += suitData.Rank * suitScoreModifier;
            }

            return value;
        }

        private static CardGameSettings LoadStoredSettings(CardGameSettings gameSettings, string fileName)
        {
            var doc = XDocument.Load(fileName);
            var settingsElement = doc.Element("Settings");

            var properties = typeof(CardGameSettings).GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance).Where(p => p.PropertyType.IsValueType).ToList();
            settingsElement.Attributes().ToList().ForEach(attr =>
            {
                var property = properties.FirstOrDefault(p => p.Name == attr.Name);
                if (property != null)
                {
                    gameSettings.SetValue(property, attr.Value);
                }
            });

            gameSettings.Cards = new CardCollection();
            gameSettings.suitData = new Dictionary<ISuit, CardMemberData>();
            gameSettings.faceValueData = new Dictionary<IFaceValue, CardMemberData>();
            gameSettings.specialCards = new List<SpecialCardData>();

            foreach (var faceValueElement in settingsElement.Element("Suits").Elements("Suit"))
            {
                gameSettings.AddSuit(faceValueElement.Attribute("Name").Value, Int32.Parse(faceValueElement.Attribute("Rank").Value));
            }

            foreach (var faceValueElement in settingsElement.Element("FaceValues").Elements("FaceValue"))
            {
                gameSettings.AddFaceValue(faceValueElement.Attribute("Value").Value, Int32.Parse(faceValueElement.Attribute("Rank").Value));
            }

            foreach (var specialCardElement in settingsElement.Element("SpecialCards").Elements("Card"))
            {
                var suitAttribute = specialCardElement.Attribute("Suit").Value;
                var faceValueAttribute = specialCardElement.Attribute("Value").Value;
                var scoreChange = Int32.Parse(specialCardElement.Attribute("ScoreChange").Value);
                var count = Int32.Parse(specialCardElement.Attribute("Count").Value);

                var card = gameSettings.GetNewCard(
                    faceValueAttribute == Constants.NullValue ? null : gameSettings.GetNewFaceValue(faceValueAttribute),
                    suitAttribute == Constants.NullValue ? null : gameSettings.GetNewSuit(suitAttribute));

                var data = new SpecialCardData(card, scoreChange, count);
                gameSettings.specialCards.Add(data);
            }

            gameSettings.LoadCards();

            return gameSettings;
        }

        private void SetValue(PropertyInfo property, string value)
        {
            if (property.PropertyType == typeof(string))
            {
                property.SetValue(this, value);
            }
            else if (property.PropertyType == typeof(bool))
            {
                property.SetValue(this, Boolean.Parse(value));
            }
            else if (property.PropertyType == typeof(int))
            {
                property.SetValue(this, Int32.Parse(value));
            }
            else if (property.PropertyType == typeof(char))
            {
                property.SetValue(this, (char)Int32.Parse(value));
            }
        }

        private object GetOutputValue(object o)
        {
            if (o.GetType() == typeof(Char))
            {
                return (int)(char)o;
            }
            else
            {
                return o;
            }
        }

        private void SaveFile(string fileName)
        {
            var doc = new XDocument();
            var settings = new XElement("Settings");

            var properties = typeof(CardGameSettings).GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance).Where(p => p.PropertyType.IsValueType).ToList();
            properties.ForEach(p => settings.Add(new XAttribute(p.Name, GetOutputValue(p.GetValue(this)))));

            settings.Add(new XElement(
                "Suits",
                from data in this.suitData
                select new XElement("Suit",
                    new XAttribute("Name", data.Key.Name),
                    new XAttribute("Rank", data.Value.Rank))));

            settings.Add(new XElement(
                "FaceValues",
                from data in this.faceValueData
                select new XElement("FaceValue",
                    new XAttribute("Value", data.Key.Value),
                    new XAttribute("Rank", data.Value.Rank))));

            settings.Add(new XElement(
                "SpecialCards",
                from cardData in this.specialCards
                select new XElement("Card",
                    new XAttribute("Suit", cardData.Card.Suit?.Name ?? Constants.NullValue),
                    new XAttribute("Value", cardData.Card.FaceValue?.Value ?? Constants.NullValue),
                    new XAttribute("ScoreChange", cardData.ScoreChange),
                    new XAttribute("Count", cardData.Count))));

            doc.Add(settings);
            doc.Save(fileName);
        }
    }

    /// <summary>
    ///     Factory class used to create new instances of the <see cref="CardGame.Core.CardGame"/> class.
    /// </summary>
    public class CardGameFactory : ICardGameFactory
    {
        private IPlayerCollectionFactory playerCollectionFactory;
        private IDeckFactory deckFactory;
        private IVictoryCheckerFactory victoryCheckerFactory;
        private IScorerFactory scorerFactory;
        private CardGameCommands commands;

        public CardGameFactory(CardGameCommands commands, IPlayerCollectionFactory playerCollectionFactory, IDeckFactory deckFactory, IScorerFactory scorerFactory, IVictoryCheckerFactory victoryCheckerFactory)
        {
            Guard.AgainstNullDataContainer(commands, nameof(commands));
            Guard.AgainstNull(playerCollectionFactory, nameof(playerCollectionFactory));
            Guard.AgainstNull(deckFactory, nameof(deckFactory));
            Guard.AgainstNull(scorerFactory, nameof(scorerFactory));
            Guard.AgainstNull(victoryCheckerFactory, nameof(victoryCheckerFactory));

            this.commands = commands;
            this.playerCollectionFactory = playerCollectionFactory;
            this.deckFactory = deckFactory;
            this.victoryCheckerFactory = victoryCheckerFactory;
            this.scorerFactory = scorerFactory;
        }

        public ICardGame Create()
        {
            return new CardGame.Core.CardGame(this.commands, this.playerCollectionFactory.Create(), this.deckFactory.Create(), this.scorerFactory.Create(), this.victoryCheckerFactory.Create());
        }
    }

    /// <summary>
    ///     This class is used to manage players and individual game sessions, including starting, stopping, and restarting games.
    /// </summary>
    public class CardGameSessionManager
    {
        private ICardGameFactory cardGameFactory;
        private IPlayerCollectionFactory playerCollectionFactory;
        private ITextInterface textInterface;
        private char continueRoundKey;
        private char exitKey;

        public CardGameSessionManager(KeyInputSettings settings, ITextInterface textInterface, IPlayerCollectionFactory playerCollectionFactory, ICardGameFactory cardGameFactory)
        {
            Guard.AgainstNullDataContainer(settings, nameof(settings));
            Guard.AgainstNull(textInterface, nameof(textInterface));
            Guard.AgainstNull(playerCollectionFactory, nameof(playerCollectionFactory));
            Guard.AgainstNull(cardGameFactory, nameof(cardGameFactory));

            this.continueRoundKey = settings.ContinueRoundKey;
            this.exitKey = settings.ExitKey;
            this.playerCollectionFactory = playerCollectionFactory;
            this.cardGameFactory = cardGameFactory;
            this.textInterface = textInterface;
            this.textInterface.KeyPressed += TextInterface_KeyPressed;
        }

        private void TextInterface_KeyPressed(object sender, KeyPressEventArgs e)
        {
            if (e.KeyPressed == this.exitKey)
            {
                this.Exit();
            }
        }

        private void Exit()
        {
            this.textInterface.KeyPressed -= TextInterface_KeyPressed;

            this.textInterface.WriteLine();
            this.textInterface.WriteLine();
            this.textInterface.WriteLine("Press any key to exit. ");
            this.textInterface.ReadKey();
            this.textInterface.Backspace();

            Environment.Exit(0);
        }

        public void BeginSession()
        {
            this.textInterface.WriteLine("~~ Card Game ~~");
            this.textInterface.WriteLine();

            var game = this.cardGameFactory.Create();
            this.ExecuteGame(game);
        }

        private void ExecuteGame(ICardGame game)
        {
            int roundCounter = 1;
            do
            {
                this.textInterface.Clear();
                this.textInterface.WriteLine($"Round {roundCounter}");
                this.textInterface.WriteLine();

                game.ExecuteRound();

                roundCounter++;
                if (!game.IsGameOver())
                {
                    this.textInterface.WriteLine();
                    this.textInterface.Write($"Press {this.continueRoundKey} to continue. ");
                    this.textInterface.ReadSingleCharFromList(new[] { this.continueRoundKey });
                    this.textInterface.Backspace();
                }
            }
            while (!game.IsGameOver());

            this.HandleGameOver(game);
        }

        private void HandleGameOver(ICardGame game)
        {
            this.textInterface.WriteLine();
            if (this.textInterface.GetYesOrNoResponse("Play again?"))
            {
                game.RestartGame();

                this.textInterface.WriteLine();
                if (!this.textInterface.GetYesOrNoResponse("Keep the same players again?"))
                {
                    this.textInterface.Clear();
                    var newPlayers = this.playerCollectionFactory.Create();
                    game.SetPlayers(newPlayers);
                }

                this.ExecuteGame(game);
            }
            else
            {
                this.Exit();
            }
        }
    }
}
